#!/bin/bash

# ------------------------------------------------------------------------------
# Global functions
# ------------------------------------------------------------------------------

function ConfigureGlobals() {
  . /etc/os-release                                         # Set linux distribution (debian | arch) into ID global
  export LINUX="$ID"                                        # Linux distribution
  export INSTALL_FOLDER=".install"
  export CONFIG_FOLDER=".config"
  export MNT_FOLDER="/mnt"
  export TEMP_FILE="/tmp/tempfile"


  if [[ $LINUX != "arch" ]]; then
    echo "This installation does not work for the" $LINUX "distribution!"
    exit 1                                                  # Exit on wrong option
  fi
}

function UpdatePackages() { 
  pacman-key --init
  pacman-key --populate
  pacman -Sy archlinux-keyring --noconfirm
}

function Install() {
  packages=$1                                               # First argument: packages to be installed
  pacman -S $packages --noconfirm
}

function EnableService() {
  service=$1
  systemctl enable $service
}

function StartService() {
  service=$1
  systemctl start $service
}

function CopyConfigurations(){
  arch-chroot ${MNT_FOLDER} /bin/bash -c "cp -r ~/.xinitrc /home/${user}/.xinitrc"
  arch-chroot ${MNT_FOLDER} /bin/bash -c "chown ${user} /home/${user}/.xinitrc"
  arch-chroot ${MNT_FOLDER} /bin/bash -c "chgrp ${user} /home/${user}/.xinitrc"

  echo "Press enter to continue ..."
  read
  arch-chroot ${MNT_FOLDER} /bin/bash -c "cp -r ~/${CONFIG_FOLDER}/* /home/${user}/${CONFIG_FOLDER}/"
  echo "Press enter to continue ..."
  read
  arch-chroot ${MNT_FOLDER} /bin/bash -c "chown -R ${user} /home/${user}/${CONFIG_FOLDER}"
  arch-chroot ${MNT_FOLDER} /bin/bash -c "chgrp -R ${user} /home/${user}/${CONFIG_FOLDER}"
}

function CopySetupScript() {
  mkdir -p ${MNT_FOLDER}/home/${user}/${INSTALL_FOLDER}

  cp -r ~/linux ${MNT_FOLDER}/home/${user}/${INSTALL_FOLDER}/
  arch-chroot ${MNT_FOLDER} /bin/bash -c "cp -r ~/${INSTALL_FOLDER}/* /home/${user}/${INSTALL_FOLDER}/"
  arch-chroot ${MNT_FOLDER} /bin/bash -c "chown -R ${user} /home/${user}/${INSTALL_FOLDER}"
  arch-chroot ${MNT_FOLDER} /bin/bash -c "chgrp -R ${user} /home/${user}/${INSTALL_FOLDER}"
  arch-chroot ${MNT_FOLDER} /bin/bash -c "ln -s /home/${user}/${INSTALL_FOLDER}/nvim /home/${user}/${CONFIG_FOLDER}/nvim"
}

function GitClone() {
  gitrepo=$1
  git clone ${gitrepo}
}

function GitHubClone() {
  gitrepo=$1
  target=.
  if [[ -n $2 ]]; then
    target=$2
  fi
  git clone https://github.com/${gitrepo} ${target}
}

function CreateEssentialFolders() {
  mkdir -p ${MNT_FOLDER}/root/${INSTALL_FOLDER}
  mkdir -p ${MNT_FOLDER}/root/${CONFIG_FOLDER}
  echo "${MNT_FOLDER}/root/${INSTALL_FOLDER}"
  echo "${MNT_FOLDER}/root/${CONFIG_FOLDER}"

  echo "Press enter to continue ..."
  read
}


# ------------------------------------------------------------------------------
# Partition related functions
# ------------------------------------------------------------------------------

function CreatePartitions() {
  if [[ $boot == "bios" ]]; then
    echo -e "o\nn\n\n\n\n\na\nw\n" | fdisk $disk
  fi 

  if [[ $boot == "uefi" ]]; then
    echo -e "g\nn\n\n\n+1G\nt\nuefi\nn\n\n\n\nw\n" | fdisk $disk
  fi
}

function FormatPartitions() {
  if [[ $boot == "bios" ]]; then
    mkfs.ext4 ${disk}1
  fi

  if [[ $boot == "uefi" ]]; then
    mkfs.fat -F 32 ${disk}1
    mkfs.ext4 ${disk}2
  fi
}

function MountPartitions() {
  if [[ $boot == "bios" ]]; then
    mount ${disk}1 ${MNT_FOLDER}
  fi

  if [[ $boot == "uefi" ]]; then
    mount ${disk}2 ${MNT_FOLDER}
    mount --mkdir ${disk}1 ${MNT_FOLDER}/boot/efi
  fi
}

function UmountPartitions() {
  umount -R ${MNT_FOLDER}
}

function ShutdownSystem() {
  shutdown -h now
}
